/*
    * @author: Derek Rojas Mendoza
    * @author: Joseph Le√≥n Cabezas
*/

-- ----------------- CRUD para Carrera -----------------

CREATE OR REPLACE PROCEDURE MOVILES.INSERTAR_CARRERA(
    P_CODIGO IN VARCHAR2,
    P_NOMBRE IN VARCHAR2,
    P_TITULO IN VARCHAR2
) AS
BEGIN
    INSERT INTO MOVILES.CARRERA (CODIGO_CARRERA, NOMBRE, TITULO) VALUES (P_CODIGO, P_NOMBRE, P_TITULO);
END;
/

CREATE OR REPLACE FUNCTION MOVILES.OBTENER_CARRERAS RETURN SYS_REFCURSOR AS
    RESULT_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN RESULT_CURSOR FOR SELECT * FROM MOVILES.CARRERA;
    RETURN RESULT_CURSOR;
END;

CREATE OR REPLACE PROCEDURE MOVILES.ACTUALIZAR_CARRERA(
    P_CODIGO IN VARCHAR2,
    P_NOMBRE IN VARCHAR2,
    P_TITULO IN VARCHAR2
) AS
BEGIN
    UPDATE MOVILES.CARRERA SET NOMBRE = P_NOMBRE, TITULO = P_TITULO WHERE CODIGO_CARRERA = P_CODIGO;
END;
/

CREATE OR REPLACE PROCEDURE MOVILES.ELIMINAR_CARRERA(
    P_CODIGO IN VARCHAR2
) AS
BEGIN
    DELETE FROM MOVILES.CARRERA WHERE CODIGO_CARRERA = P_CODIGO;
END;
/

CREATE OR REPLACE FUNCTION MOVILES.OBTENER_CARRERA_POR_CODIGO(
    P_CODIGO IN VARCHAR2
) RETURN SYS_REFCURSOR AS
    RESULT_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN RESULT_CURSOR FOR SELECT * FROM MOVILES.CARRERA WHERE CODIGO_CARRERA = P_CODIGO;
    RETURN RESULT_CURSOR;
END;
/

CREATE OR REPLACE FUNCTION MOVILES.OBTENER_CARRERA_POR_NOMBRE(
    P_NOMBRE IN VARCHAR2
) RETURN SYS_REFCURSOR AS
    RESULT_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN RESULT_CURSOR FOR SELECT * FROM MOVILES.CARRERA WHERE NOMBRE = P_NOMBRE;
    RETURN RESULT_CURSOR;
END;
/

-- ----------------- CRUD para Curso -----------------

CREATE OR REPLACE PROCEDURE MOVILES.INSERTAR_CURSO(
    P_CODIGO IN VARCHAR2,
    P_NOMBRE IN VARCHAR2,
    P_CREDITOS IN NUMBER,
    P_HORAS_SEMANALES IN NUMBER
) AS
BEGIN
    INSERT INTO MOVILES.CURSO (CODIGO_CURSO, NOMBRE, CREDITOS, HORAS_SEMANALES) VALUES (P_CODIGO, P_NOMBRE, P_CREDITOS, P_HORAS_SEMANALES);
END;
/

CREATE OR REPLACE FUNCTION MOVILES.OBTENER_CURSOS RETURN SYS_REFCURSOR AS
    RESULT_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN RESULT_CURSOR FOR SELECT * FROM MOVILES.CURSO;
    RETURN RESULT_CURSOR;
END;
/

CREATE OR REPLACE PROCEDURE MOVILES.ACTUALIZAR_CURSO(
    P_CODIGO IN VARCHAR2,
    P_NOMBRE IN VARCHAR2,
    P_CREDITOS IN NUMBER,
    P_HORAS_SEMANALES IN NUMBER
) AS
BEGIN
    UPDATE MOVILES.CURSO SET NOMBRE = P_NOMBRE, CREDITOS = P_CREDITOS, HORAS_SEMANALES = P_HORAS_SEMANALES WHERE CODIGO_CURSO = P_CODIGO;
END;
/

CREATE OR REPLACE PROCEDURE MOVILES.ELIMINAR_CURSO(
    P_CODIGO IN VARCHAR2
) AS
BEGIN
    DELETE FROM MOVILES.CURSO WHERE CODIGO_CURSO = P_CODIGO;
END;
/

CREATE OR REPLACE FUNCTION MOVILES.OBTENER_CURSO_POR_CODIGO(
    P_CODIGO IN VARCHAR2
) RETURN SYS_REFCURSOR AS
    RESULT_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN RESULT_CURSOR FOR SELECT * FROM MOVILES.CURSO WHERE CODIGO_CURSO = P_CODIGO;
    RETURN RESULT_CURSOR;
END;
/

CREATE OR REPLACE FUNCTION MOVILES.OBTENER_CURSOS_POR_CARRERA(
    P_CODIGO_CARRERA IN VARCHAR2
) RETURN SYS_REFCURSOR AS
    RESULT_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN RESULT_CURSOR FOR SELECT * FROM MOVILES.CURSO WHERE CODIGO_CURSO IN (SELECT CODIGO_CURSO FROM MOVILES.CARRERA_CURSO WHERE CODIGO_CARRERA = P_CODIGO_CARRERA);
    RETURN RESULT_CURSOR;
END;

CREATE OR REPLACE FUNCTION MOVILES.OBTENER_CURSOS_POR_NOMBRE(
    P_NOMBRE IN VARCHAR2
) RETURN SYS_REFCURSOR AS
    RESULT_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN RESULT_CURSOR FOR SELECT * FROM MOVILES.CURSO WHERE NOMBRE = P_NOMBRE;
    RETURN RESULT_CURSOR;
END;

-- ----------------- CRUD para Carrera_Curso -----------------

CREATE OR REPLACE PROCEDURE MOVILES.INSERTAR_CARRERA_CURSO(
    P_CODIGO_CARRERA IN VARCHAR2,
    P_CODIGO_CURSO IN VARCHAR2,
    P_ANIO IN NUMBER,
    P_CICLO IN NUMBER,
    P_ORDEN IN NUMBER
) AS
BEGIN
    INSERT INTO MOVILES.CARRERA_CURSO (CODIGO_CARRERA, CODIGO_CURSO, ANIO, CICLO, ORDEN) VALUES (P_CODIGO_CARRERA, P_CODIGO_CURSO, P_ANIO, P_CICLO, P_ORDEN);
END;
/

CREATE OR REPLACE FUNCTION MOVILES.OBTENER_CARRERAS_CURSOS RETURN SYS_REFCURSOR AS
    RESULT_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN RESULT_CURSOR FOR SELECT * FROM MOVILES.CARRERA_CURSO;
    RETURN RESULT_CURSOR;
END;
/

CREATE OR REPLACE PROCEDURE MOVILES.ACTUALIZAR_CARRERA_CURSO(
    P_CARRERA_CURSO_ID IN NUMBER,
    P_ANIO IN NUMBER,
    P_CICLO IN NUMBER,
    P_ORDEN IN NUMBER
) AS
BEGIN
    UPDATE MOVILES.CARRERA_CURSO SET ANIO = P_ANIO, CICLO = P_CICLO, ORDEN = P_ORDEN WHERE CARRERA_CURSO_ID = P_CARRERA_CURSO_ID;
END;
/

CREATE OR REPLACE PROCEDURE MOVILES.ELIMINAR_CARRERA_CURSO(
    P_CARRERA_CURSO_ID IN NUMBER
) AS
BEGIN
    DELETE FROM MOVILES.CARRERA_CURSO WHERE CARRERA_CURSO_ID = P_CARRERA_CURSO_ID;
END;
/

CREATE OR REPLACE FUNCTION MOVILES.OBTENER_CARRERA_CURSO_POR_ID(
    P_CARRERA_CURSO_ID IN NUMBER
) RETURN SYS_REFCURSOR AS
    RESULT_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN RESULT_CURSOR FOR SELECT * FROM MOVILES.CARRERA_CURSO WHERE CARRERA_CURSO_ID = P_CARRERA_CURSO_ID;
    RETURN RESULT_CURSOR;
END;
/

-- ----------------- CRUD para Profesor -----------------

CREATE OR REPLACE PROCEDURE MOVILES.INSERTAR_PROFESOR(
    P_CEDULA IN VARCHAR2,
    P_NOMBRE IN VARCHAR2,
    P_TELEFONO IN VARCHAR2,
    P_EMAIL IN VARCHAR2
) AS
BEGIN
    INSERT INTO MOVILES.PROFESOR (CEDULA, NOMBRE, TELEFONO, EMAIL) VALUES (P_CEDULA, P_NOMBRE, P_TELEFONO, P_EMAIL);
END;
/

CREATE OR REPLACE FUNCTION MOVILES.OBTENER_PROFESORES RETURN SYS_REFCURSOR AS
    RESULT_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN RESULT_CURSOR FOR SELECT * FROM MOVILES.PROFESOR;
    RETURN RESULT_CURSOR;
END;
/

CREATE OR REPLACE PROCEDURE MOVILES.ACTUALIZAR_PROFESOR(
    P_CEDULA IN VARCHAR2,
    P_NOMBRE IN VARCHAR2,
    P_TELEFONO IN VARCHAR2,
    P_EMAIL IN VARCHAR2
) AS
BEGIN
    UPDATE MOVILES.PROFESOR SET NOMBRE = P_NOMBRE, TELEFONO = P_TELEFONO, EMAIL = P_EMAIL WHERE CEDULA = P_CEDULA;
END;
/

CREATE OR REPLACE PROCEDURE MOVILES.ELIMINAR_PROFESOR(
    P_CEDULA IN VARCHAR2
) AS
BEGIN
    DELETE FROM MOVILES.PROFESOR WHERE CEDULA = P_CEDULA;
END;
/

CREATE OR REPLACE FUNCTION MOVILES.OBTENER_PROFESOR_POR_CEDULA(
    P_CEDULA IN VARCHAR2
) RETURN SYS_REFCURSOR AS
    RESULT_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN RESULT_CURSOR FOR SELECT * FROM MOVILES.PROFESOR WHERE CEDULA = P_CEDULA;
    RETURN RESULT_CURSOR;
END;
/

CREATE OR REPLACE FUNCTION MOVILES.OBTENER_PROFESOR_POR_NOMBRE(
    P_NOMBRE IN VARCHAR2
) RETURN SYS_REFCURSOR AS
    RESULT_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN RESULT_CURSOR FOR SELECT * FROM MOVILES.PROFESOR WHERE NOMBRE = P_NOMBRE;
    RETURN RESULT_CURSOR;
END;
/

-- ----------------- CRUD para Alumno -----------------

CREATE OR REPLACE PROCEDURE MOVILES.INSERTAR_ALUMNO(
    P_CEDULA IN VARCHAR2,
    P_NOMBRE IN VARCHAR2,
    P_TELEFONO IN VARCHAR2,
    P_EMAIL IN VARCHAR2,
    P_FECHA_NACIMIENTO IN DATE,
    P_CODIGO_CARRERA IN VARCHAR2
) AS
BEGIN
    INSERT INTO MOVILES.ALUMNO (CEDULA, NOMBRE, TELEFONO, EMAIL, FECHA_NACIMIENTO, CODIGO_CARRERA) VALUES (P_CEDULA, P_NOMBRE, P_TELEFONO, P_EMAIL, P_FECHA_NACIMIENTO, P_CODIGO_CARRERA);
END;
/

CREATE OR REPLACE FUNCTION MOVILES.OBTENER_ALUMNOS RETURN SYS_REFCURSOR AS
    RESULT_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN RESULT_CURSOR FOR SELECT * FROM MOVILES.ALUMNO;
    RETURN RESULT_CURSOR;
END;
/

CREATE OR REPLACE PROCEDURE MOVILES.ACTUALIZAR_ALUMNO(
    P_CEDULA IN VARCHAR2,
    P_NOMBRE IN VARCHAR2,
    P_TELEFONO IN VARCHAR2,
    P_EMAIL IN VARCHAR2,
    P_FECHA_NACIMIENTO IN DATE,
    P_CODIGO_CARRERA IN VARCHAR2
) AS
BEGIN
    UPDATE MOVILES.ALUMNO SET NOMBRE = P_NOMBRE, TELEFONO = P_TELEFONO, EMAIL = P_EMAIL, FECHA_NACIMIENTO = P_FECHA_NACIMIENTO, CODIGO_CARRERA = P_CODIGO_CARRERA WHERE CEDULA = P_CEDULA;
END;
/

CREATE OR REPLACE PROCEDURE MOVILES.ELIMINAR_ALUMNO(
    P_CEDULA IN VARCHAR2
) AS
BEGIN
    DELETE FROM MOVILES.ALUMNO WHERE CEDULA = P_CEDULA;
END;
/

CREATE OR REPLACE FUNCTION MOVILES.OBTENER_ALUMNO_POR_CEDULA(
    P_CEDULA IN VARCHAR2
) RETURN SYS_REFCURSOR AS
    RESULT_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN RESULT_CURSOR FOR SELECT * FROM MOVILES.ALUMNO WHERE CEDULA = P_CEDULA;
    RETURN RESULT_CURSOR;
END;
/

CREATE OR REPLACE FUNCTION MOVILES.OBTENER_ALUMNO_POR_NOMBRE(
    P_NOMBRE IN VARCHAR2
) RETURN SYS_REFCURSOR AS
    RESULT_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN RESULT_CURSOR FOR SELECT * FROM MOVILES.ALUMNO WHERE NOMBRE = P_NOMBRE;
    RETURN RESULT_CURSOR;
END;
/

CREATE OR REPLACE FUNCTION MOVILES.OBTENER_ALUMNOS_POR_CARRERA(
    P_CODIGO_CARRERA IN VARCHAR2
) RETURN SYS_REFCURSOR AS
    RESULT_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN RESULT_CURSOR FOR SELECT * FROM MOVILES.ALUMNO WHERE CODIGO_CARRERA = P_CODIGO_CARRERA;
    RETURN RESULT_CURSOR;
END;
/

-- ----------------- CRUD para Ciclo -----------------

CREATE OR REPLACE PROCEDURE MOVILES.INSERTAR_CICLO(
    P_ANIO IN NUMBER,
    P_NUMERO IN NUMBER,
    P_FECHA_INICIO IN DATE,
    P_FECHA_FIN IN DATE,
    P_ACTIVO IN NUMBER
) AS
BEGIN
    INSERT INTO MOVILES.CICLO (ANIO, NUMERO, FECHA_INICIO, FECHA_FIN, ACTIVO) VALUES (P_ANIO, P_NUMERO, P_FECHA_INICIO, P_FECHA_FIN, P_ACTIVO);
END;
/

CREATE OR REPLACE FUNCTION MOVILES.OBTENER_CICLOS RETURN SYS_REFCURSOR AS
    RESULT_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN RESULT_CURSOR FOR SELECT * FROM MOVILES.CICLO;
    RETURN RESULT_CURSOR;
END;
/

CREATE OR REPLACE PROCEDURE MOVILES.ACTUALIZAR_CICLO(
    P_ANIO IN NUMBER,
    P_NUMERO IN NUMBER,
    P_FECHA_INICIO IN DATE,
    P_FECHA_FIN IN DATE,
    P_ACTIVO IN NUMBER
) AS
BEGIN
    UPDATE MOVILES.CICLO SET NUMERO = P_NUMERO, FECHA_INICIO = P_FECHA_INICIO, FECHA_FIN = P_FECHA_FIN, ACTIVO = P_ACTIVO WHERE ANIO = P_ANIO;
END;
/

CREATE OR REPLACE PROCEDURE MOVILES.ELIMINAR_CICLO(
    P_ANIO IN NUMBER,
    P_NUMERO IN NUMBER
) AS
BEGIN
    DELETE FROM MOVILES.CICLO WHERE ANIO = P_ANIO AND NUMERO = P_NUMERO;
END;
/

CREATE OR REPLACE FUNCTION MOVILES.OBTENER_CICLO_POR_ANIO(
    P_ANIO IN NUMBER
) RETURN SYS_REFCURSOR AS
    RESULT_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN RESULT_CURSOR FOR SELECT * FROM MOVILES.CICLO WHERE ANIO = P_ANIO;
    RETURN RESULT_CURSOR;
END;
/

-- ----------------- CRUD para Grupo -----------------

CREATE OR REPLACE PROCEDURE MOVILES.INSERTAR_GRUPO(
    P_CICLO_ID IN NUMBER,
    P_CODIGO_CURSO IN VARCHAR2,
    P_NUMERO_GRUPO IN NUMBER,
    P_HORARIO IN VARCHAR2,
    P_CEDULA_PROFESOR IN VARCHAR2
) AS
BEGIN
    INSERT INTO MOVILES.GRUPO (CICLO_ID, CODIGO_CURSO, NUMERO_GRUPO, HORARIO, CEDULA_PROFESOR) VALUES (P_CICLO_ID, P_CODIGO_CURSO, P_NUMERO_GRUPO, P_HORARIO, P_CEDULA_PROFESOR);
END;
/

CREATE OR REPLACE FUNCTION MOVILES.OBTENER_GRUPOS RETURN SYS_REFCURSOR AS
    RESULT_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN RESULT_CURSOR FOR SELECT * FROM MOVILES.GRUPO;
    RETURN RESULT_CURSOR;
END;
/

CREATE OR REPLACE PROCEDURE MOVILES.ACTUALIZAR_GRUPO(
    P_GRUPO_ID IN NUMBER,
    P_HORARIO IN VARCHAR2,
    P_CEDULA_PROFESOR IN VARCHAR2
) AS
BEGIN
    UPDATE MOVILES.GRUPO SET HORARIO = P_HORARIO, CEDULA_PROFESOR = P_CEDULA_PROFESOR WHERE GRUPO_ID = P_GRUPO_ID;
END;
/

CREATE OR REPLACE PROCEDURE MOVILES.ELIMINAR_GRUPO(
    P_GRUPO_ID IN NUMBER
) AS
BEGIN
    DELETE FROM MOVILES.GRUPO WHERE GRUPO_ID = P_GRUPO_ID;
END;
/

CREATE OR REPLACE FUNCTION MOVILES.OBTENER_GRUPO_POR_ID(
    P_GRUPO_ID IN NUMBER
) RETURN SYS_REFCURSOR AS
    RESULT_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN RESULT_CURSOR FOR SELECT * FROM MOVILES.GRUPO WHERE GRUPO_ID = P_GRUPO_ID;
    RETURN RESULT_CURSOR;
END;
/

-- ----------------- CRUD para Usuario -----------------

CREATE OR REPLACE PROCEDURE MOVILES.INSERTAR_USUARIO(
    P_CEDULA IN VARCHAR2,
    P_CLAVE IN VARCHAR2,
    P_TIPO_USUARIO IN VARCHAR2
) AS
BEGIN
    INSERT INTO MOVILES.USUARIO (CEDULA, CLAVE, TIPO_USUARIO) VALUES (P_CEDULA, P_CLAVE, P_TIPO_USUARIO);
END;
/

CREATE OR REPLACE FUNCTION MOVILES.OBTENER_USUARIOS RETURN SYS_REFCURSOR AS
    RESULT_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN RESULT_CURSOR FOR SELECT * FROM MOVILES.USUARIO;
    RETURN RESULT_CURSOR;
END;
/

CREATE OR REPLACE PROCEDURE MOVILES.ACTUALIZAR_USUARIO(
    P_CEDULA IN VARCHAR2,
    P_CLAVE IN VARCHAR2,
    P_TIPO_USUARIO IN VARCHAR2
) AS
BEGIN
    UPDATE MOVILES.USUARIO SET CLAVE = P_CLAVE, TIPO_USUARIO = P_TIPO_USUARIO WHERE CEDULA = P_CEDULA;
END;
/

CREATE OR REPLACE PROCEDURE MOVILES.ELIMINAR_USUARIO(
    P_CEDULA IN VARCHAR2
) AS
BEGIN
    DELETE FROM MOVILES.USUARIO WHERE CEDULA = P_CEDULA;
END;
/

CREATE OR REPLACE FUNCTION MOVILES.OBTENER_USUARIO_POR_CEDULA(
    P_CEDULA IN VARCHAR2
) RETURN SYS_REFCURSOR AS
    RESULT_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN RESULT_CURSOR FOR SELECT * FROM MOVILES.USUARIO WHERE CEDULA = P_CEDULA;
    RETURN RESULT_CURSOR;
END;
/


CREATE OR REPLACE PROCEDURE MOVILES.LOGIN_USUARIO(
    p_cedula IN VARCHAR2,
    p_clave IN VARCHAR2,
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR
        SELECT cedula, clave, tipo_usuario
        FROM MOVILES.USUARIO
        WHERE cedula = p_cedula
          AND clave = p_clave;
END;
/

-- ----------------- Matr√≠cula -----------------

CREATE OR REPLACE PROCEDURE MOVILES.REGISTRAR_MATRICULA(
    P_GRUPO_ID IN NUMBER,
    P_CEDULA_ALUMNO IN VARCHAR2
) AS
BEGIN
    INSERT INTO MOVILES.MATRICULA (GRUPO_ID, CEDULA_ALUMNO) VALUES (P_GRUPO_ID, P_CEDULA_ALUMNO);
END;
/

CREATE OR REPLACE PROCEDURE MOVILES.ELIMINAR_MATRICULA(
    P_GRUPO_ID IN NUMBER,
    P_CEDULA_ALUMNO IN VARCHAR2
) AS
BEGIN
    DELETE FROM MOVILES.MATRICULA WHERE GRUPO_ID = P_GRUPO_ID AND CEDULA_ALUMNO = P_CEDULA_ALUMNO;
END;
/

-- ----------------- Registro de Notas -----------------

CREATE OR REPLACE PROCEDURE MOVILES.REGISTRAR_NOTA(
    P_GRUPO_ID IN NUMBER,
    P_ALUMNO_ID IN VARCHAR2,
    P_NOTA IN NUMBER
) AS
BEGIN
    INSERT INTO MOVILES.MATRICULA (GRUPO_ID, CEDULA_ALUMNO, NOTA) VALUES (P_GRUPO_ID, P_ALUMNO_ID, P_NOTA);
END;
/

-- ----------------- Historial Acad√©mico -----------------

CREATE OR REPLACE FUNCTION MOVILES.CONSULTAR_HISTORIAL(
    P_ALUMNO_ID IN VARCHAR2
) RETURN SYS_REFCURSOR AS
    RESULT_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN RESULT_CURSOR FOR SELECT * FROM MOVILES.MATRICULA WHERE CEDULA_ALUMNO = P_ALUMNO_ID;
    RETURN RESULT_CURSOR;
END;
/